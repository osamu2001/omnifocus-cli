#!/usr/bin/osascript -l JavaScript

ObjC.import('stdlib');

function getFullFolderPath(folder) {
  if (!folder || typeof folder.name !== 'function') {

    return "";
  }
  let parent;
  try {
    parent = folder.container();
  } catch (e) {

    parent = null;
  }

  let isParentFolder = false;
  try {

    isParentFolder = parent && typeof parent.class === 'function' && parent.class() === 'folder';
  } catch (e) {

    isParentFolder = false;
  }

  if (isParentFolder) {
    const parentPath = getFullFolderPath(parent);
    return parentPath ? `${parentPath}/${folder.name()}` : folder.name();
  } else {

    return folder.name();
  }
}

function collectIncompleteTasksRecursive(tasks, parentPath, outputArray) {
  if (!tasks || tasks.length === 0) {
    return;
  }

  for (const task of tasks) {
    try {

      if (task && typeof task.completed === 'function' && !task.completed()) {
        const taskName = task.name();
        if (!taskName) continue;

        const taskId = task.id();
        const fullPath = parentPath ? `${parentPath}/${taskName}` : taskName;
        outputArray.push(`${taskId}\t${fullPath}`);

        if (typeof task.tasks === 'function') {
          const subTasks = task.tasks();
          collectIncompleteTasksRecursive(subTasks, fullPath, outputArray);
        }
      }
    } catch (e) {

      const taskNameAttempt = typeof task?.name === 'function' ? task.name() : '不明なタスク';
      console.error(`タスク "${taskNameAttempt}" (ID: ${typeof task?.id === 'function' ? task.id() : 'N/A'}) の処理中にエラー: ${e}`);
    }
  }
}

function getOmniFocusApp() {
    try {
        const app = Application('OmniFocus');
        app.includeStandardAdditions = true;
        return app;
    } catch (e) {
        console.error("OmniFocus アプリケーションが見つかりません。");
        throw e;
    }
}

try {
  const app = getOmniFocusApp();
  const doc = app.defaultDocument;

  const projects = doc.flattenedProjects();
  const output = [];

  for (const project of projects) {
    let status = "";
    let projectName = "";
    let folder = null;

    try {

      status = project.status();
      projectName = project.name();
      if (!projectName) continue;

      if (status === "completed" || status === "dropped" || status === "done status" || status === "inactive") {
          continue;
      }

      folder = project.folder();

    } catch (e) {
      const projectNameAttempt = typeof project?.name === 'function' ? project.name() : '不明なプロジェクト';
      console.error(`プロジェクト "${projectNameAttempt}" (ID: ${typeof project?.id === 'function' ? project.id() : 'N/A'}) の情報取得中にエラー: ${e}`);
      continue;
    }

    let projectPath = "";
    if (folder && typeof folder.name === 'function') {
      const folderPath = getFullFolderPath(folder);
      projectPath = folderPath ? `${folderPath}/${projectName}` : projectName;
    } else {
      projectPath = projectName;
    }

    if (typeof project.tasks === 'function') {
        try {
            const rootTasks = project.tasks();
            collectIncompleteTasksRecursive(rootTasks, projectPath, output);
        } catch(e) {
             console.error(`プロジェクト "${projectName}" 配下のタスク取得中にエラー: ${e}`);

             continue;
        }
    }
  }

  const resultString = output.join("\n");

  const stdout = $.NSFileHandle.fileHandleWithStandardOutput;
  const data = $.NSString.stringWithUTF8String(resultString).dataUsingEncoding($.NSUTF8StringEncoding);
  stdout.writeData(data);

} catch (e) {

  const stderr = $.NSFileHandle.fileHandleWithStandardError;
  const errorData = $.NSString.stringWithUTF8String(`スクリプトの実行中に予期せぬエラーが発生しました: ${e}\n`).dataUsingEncoding($.NSUTF8StringEncoding);
  stderr.writeData(errorData);

}
