#!/usr/bin/osascript -l JavaScript

ObjC.import('stdlib');

(function() {
  function getCommandLineArguments() {
    const args = [];
    if (typeof $.NSProcessInfo !== "undefined") {
      const nsArgs = $.NSProcessInfo.processInfo.arguments;
      for (let i = 0; i < nsArgs.count; i++) {
        args.push(ObjC.unwrap(nsArgs.objectAtIndex(i)));
      }
      return args.slice(4);
    }
    return args;
  }

  function validateProjectId(projectId) {
    return typeof projectId === "string" && projectId.trim().length > 0;
  }

  function findProjectById(doc, projectId) {
    const topProjects = doc.projects();
    for (const p of topProjects) {
      if (p.id() === projectId) {
        return p;
      }
    }
    function searchFolders(folders) {
      for (const folder of folders) {
        const projects = folder.projects();
        for (const p of projects) {
          if (p.id() === projectId) {
            return p;
          }
        }
        const subfolders = folder.folders();
        const found = searchFolders(subfolders);
        if (found) return found;
      }
      return null;
    }
    return searchFolders(doc.folders());
  }

  const args = getCommandLineArguments();
  const projectId = args[0];
  let result = null;

  if (!validateProjectId(projectId)) {
    console.log("Error: projectId not found or invalid");
  } else {
    try {
      const app = Application('OmniFocus');
      app.includeStandardAdditions = true;
      const doc = app.defaultDocument;

      const project = findProjectById(doc, projectId);
      if (!project) {
        console.log("Error: project not found");
      } else {
        const output = [];
        try {
          if (typeof project.flattenedTasks === "function") {
            const tasks = project.flattenedTasks();
            for (const t of tasks) {
              try {
                if (!t.completed()) {
                  output.push(`${t.id()}\t${t.name()}`);
                }
              } catch (e) {}
            }
          } else if (typeof project.tasks === "function") {
            function collectIncompleteTasks(tasks, output) {
              for (const t of tasks) {
                try {
                  if (!t.completed()) {
                    output.push(`${t.id()}\t${t.name()}`);
                    if (typeof t.tasks === "function") {
                      collectIncompleteTasks(t.tasks(), output);
                    }
                  }
                } catch (e) {}
              }
            }
            collectIncompleteTasks(project.tasks(), output);
          }
        } catch (e) {}
        result = output.join("\n");
      }
    } catch (e) {
      console.log("Error: " + e.message);
    }
  }
  return result;
})();
